@model IEnumerable<Priority_Q.Models.Table>

@{
    ViewBag.Title = "Manage Tables";
}

@functions {

    private Boolean IsOwner()
    {
        return (Request.IsAuthenticated && ViewBag.OwnsRestaurant);
    }
}

<h2>@ViewBag.RestaurantName</h2>
<h3>Tables Available
    <span class="label label-default">
        @ViewBag.AvailableTables / @ViewBag.TotalTables
    </span>
</h3>

@{
    //Initialize empty layout
    var length = 5;
    int[][] mapLayout = new int[length][];
    
    for (int i = 0; i < length; i++)
    {
        mapLayout[i] = new int[length];
    }
    
    //Fill in the tables
    foreach (var item in Model)
    {
        mapLayout[item.CoordRow][item.CoordCol] = item.ID;
    }
}

<!-- The table layout is supposed to match the actual layout of a restaurant-->
<table class="table table-striped table-hover ">
@{
    for (var r = 0; r < length; r++)
    {
        <tr>
            @for (var c = 0; c < length; c++)
            {
                <td>
                    @{
                        var addTableModal = "addTableModal" + (r*length + c);
                    }
                    @if (mapLayout[r][c] == 0)
                    {     
                        <button type="button" class="btn btn-info" data-toggle="modal" data-target="#@addTableModal">
                            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                        </button>

                        <div class="modal fade" id="@addTableModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    @{
                                        Priority_Q.Models.Table newTable = new Priority_Q.Models.Table();
                                        newTable.RestaurantId = ViewBag.RestaurantId;
                                        newTable.CoordRow = r;
                                        newTable.CoordCol = c;
                                    }
                                    @Html.Partial("~/Views/Tables/_Create.cshtml", newTable)
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        var currentTable = (new Priority_Q.Models.TableDBContext()).Tables.Find(mapLayout[r][c]);
                            
                        if (!currentTable.IsOccupied)
                        {
                            <span class="btn btn-success disabled">
                                [Max: @currentTable.MaxCapacity <span class="glyphicon glyphicon-user"></span>]
                            </span>
                        }
                        else
                        {
                            <span class="btn btn-danger disabled">
                                [Max: @currentTable.MaxCapacity <span class="glyphicon glyphicon-user"></span>]
                            </span>
                        }

                        //only logged in users should be able to edit and delete
                    <!-- Button trigger modal -->
                        var nameEditTableModal = "editTableModal" + currentTable.ID;
                        var nameDeleteTableModal = "deleteTableModal" + currentTable.ID;

                    <!-- Edit Table Modal -->
                        <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#@nameEditTableModal">
                            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                        </button>

                        <div class="modal fade" id="@nameEditTableModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    @Html.Partial("~/Views/Tables/_Edit.cshtml", currentTable);
                                </div>
                            </div>
                        </div>

                    <!-- Delete table modal -->
                        <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#@nameDeleteTableModal">
                            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                        </button>

                        <div class="modal fade" id="@nameDeleteTableModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    @Html.Partial("~/Views/Tables/_Delete.cshtml", currentTable);
                                </div>
                            </div>
                        </div>
                    }
                </td>
            }
        </tr>
    }
}
</table>
