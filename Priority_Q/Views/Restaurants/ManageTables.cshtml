@model IEnumerable<Priority_Q.Models.Table>

@{
    ViewBag.Title = "Manage Tables";
}

@functions {

    private Boolean IsOwner()
    {
        return (Request.IsAuthenticated && ViewBag.OwnsRestaurant);
    }
}

@if (ViewBag.TotalTables == 0)
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h3>
            Before you can take advantage of all the site's features, you just need to take a few minutes to setup your table layout. You will
            only need to do this once.
        </h3>
        <h4>
            If you need to edit the table layout at any time, click on the Settings button <span class="glyphicon glyphicon-cog"></span> and then
            select "Edit Table Layout".
        </h4>
    </div>

}

<h2>@ViewBag.RestaurantName</h2>
<h3>Table Layout</h3>
<hr />

<h3>
    Total: 
    <span class="label label-default">
        @ViewBag.TotalTables
    </span>
</h3>

@{
    //Initialize empty layout
    var length = 5;
    int[][] mapLayout = new int[length][];

    for (int i = 0; i < mapLayout.Length; i++)
    {
        mapLayout[i] = new int[length];
    }

    //Fill in the tables
    foreach (var item in Model)
    {
        if ((item.CoordRow - ViewBag.RowOffset >= 0) && (item.CoordRow - ViewBag.RowOffset < length)
            && (item.CoordCol - ViewBag.ColOffset >= 0) && (item.CoordCol - ViewBag.ColOffset < length))
        {
            mapLayout[item.CoordRow - ViewBag.RowOffset][item.CoordCol - ViewBag.ColOffset] = item.ID;
        }
    }
}

@{
    int fullLength = length * 2;
    int[][] wholeMap = new int[fullLength][];
    for (int i = 0; i < wholeMap.Length; i++)
    {
        wholeMap[i] = new int[fullLength];
    }

    //Fill in the tables
    foreach (var item in Model)
    {
        wholeMap[item.CoordRow][item.CoordCol] = item.ID;
    }
}

<div class="row">
    <div class="col-md-4">
        <table>
            <tr>
                <td></td>
                <td>
                    <a class="btn btn-default" href='@string.Format("/Restaurants/ManageTables/{0}?rowOffset={1}&&colOffset={2}",
    ViewBag.RestaurantId, ViewBag.RowOffset - 1, ViewBag.ColOffset)'>
                        <span class="glyphicon glyphicon-arrow-up"></span>
                    </a>
                </td>
                <td></td>
            </tr>
            <tr>
                <td>
                    <a class="btn btn-default" href='@string.Format("/Restaurants/ManageTables/{0}?rowOffset={1}&&colOffset={2}",
    ViewBag.RestaurantId, ViewBag.RowOffset, ViewBag.ColOffset - 1)'>
                        <span class="glyphicon glyphicon-arrow-left"></span>
                    </a>
                </td>
                <td>
                    <a class="btn btn-default" href='@string.Format("/Restaurants/ManageTables/{0}?rowOffset={1}&&colOffset={2}",
    ViewBag.RestaurantId, ViewBag.RowOffset + 1, ViewBag.ColOffset)'>
                        <span class="glyphicon glyphicon-arrow-down"></span>
                    </a>
                </td>
                <td>
                    <a class="btn btn-default" href='@string.Format("/Restaurants/ManageTables/{0}?rowOffset={1}&&colOffset={2}",
    ViewBag.RestaurantId, ViewBag.RowOffset, ViewBag.ColOffset + 1)'>
                        <span class="glyphicon glyphicon-arrow-right"></span>
                    </a>
                </td>
            </tr>
        </table>
    </div>

<!-- draw a minimap -->
    <div class="col-md-4">
        <table>
            @{
                for (var r = 0; r < wholeMap.Length; r++)
                {
                    <tr>
                        @for (var c = 0; c < wholeMap[r].Length; c++)
                        {
                            <td>
                                <!-- Highlight all the tiles that are visible-->
                                @if ((r - ViewBag.RowOffset >= 0) && (r - ViewBag.RowOffset < length)
                                             && (c - ViewBag.ColOffset >= 0) && (c - ViewBag.ColOffset < length))
                                {
                                <!-- Only highlight the outer edge (don't highlight the ones on the inside)-->
                                    if (r == ViewBag.RowOffset || r == ViewBag.RowOffset + length - 1
                                        || c == ViewBag.ColOffset || c == ViewBag.ColOffset + length - 1)
                                    {
                                        @: <span class="label label-primary">
                                }
                                    else
                                    {
                                        @: <span class="label label-default">
                                }
                                }
                                else
                                {
                                    @: <span class="label label-primary" style="background: transparent;">
                            }

                                @if (wholeMap[r][c] == 0)
                                {
                                    <span class="label label-info" style="background: transparent;">
                                        &emsp;
                                    </span>
                                }
                                else
                                {
                                    var currentTable = (new Priority_Q.Models.TableDBContext()).Tables.Find(wholeMap[r][c]);

                                    if (!currentTable.IsOccupied)
                                    {
                                        <span class="label label-success disabled">@currentTable.MaxCapacity</span>
                                    }
                                    else
                                    {
                                        <span class="label label-danger disabled">@currentTable.MaxCapacity</span>
                                    }
                                }

                                @if (true)
                                {
                                    @: </span>
                                }
                    </td>
                        }
                    </tr>
                }
            }
        </table>
    </div>
    
    <div class="col-md-12">
        <!-- The table layout is supposed to match the actual layout of a restaurant-->
        <table class="table table-striped table-hover ">
            @{
                for (var r = 0; r < length; r++)
                {
                    <tr>
                        @for (var c = 0; c < length; c++)
                        {
                            <td>
                                @{
                            var addTableModal = "addTableModal" + (r * length + c);
                                }
                                @if (mapLayout[r][c] == 0)
                                {
                                    <span class="btn btn-info disabled" style="background: transparent;">
                                        &emsp; &emsp; &emsp; &emsp;
                                    </span>

                                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#@addTableModal">
                                        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                                    </button>

                                    <div class="modal fade" id="@addTableModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                @{
                                    Priority_Q.Models.Table newTable = new Priority_Q.Models.Table();
                                    newTable.RestaurantId = ViewBag.RestaurantId;
                                    newTable.CoordRow = r + ViewBag.RowOffset;
                                    newTable.CoordCol = c + ViewBag.ColOffset;
                                                }
                                                @Html.Partial("~/Views/Tables/_Create.cshtml", newTable)
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    var currentTable = (new Priority_Q.Models.TableDBContext()).Tables.Find(mapLayout[r][c]);

                                    if (!currentTable.IsOccupied)
                                    {
                                        <span class="btn btn-success disabled">
                                            [Max: @currentTable.MaxCapacity <span class="glyphicon glyphicon-user"></span>]
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="btn btn-danger disabled">
                                            [Max: @currentTable.MaxCapacity <span class="glyphicon glyphicon-user"></span>]
                                        </span>
                                    }

                                    //only logged in users should be able to edit and delete
                    <!-- Button trigger modal -->
                                    var nameEditTableModal = "editTableModal" + currentTable.ID;
                                    var nameDeleteTableModal = "deleteTableModal" + currentTable.ID;

                    <!-- Edit Table Modal -->
                                    <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#@nameEditTableModal">
                                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                                    </button>

                                    <div class="modal fade" id="@nameEditTableModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                @Html.Partial("~/Views/Tables/_Edit.cshtml", currentTable);
                                            </div>
                                        </div>
                                    </div>

                    <!-- Delete table modal -->
                                    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#@nameDeleteTableModal">
                                        <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                    </button>

                                    <div class="modal fade" id="@nameDeleteTableModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                @Html.Partial("~/Views/Tables/_Delete.cshtml", currentTable);
                                            </div>
                                        </div>
                                    </div>
                                }
                            </td>
                        }
                    </tr>
                }
            }
        </table>
    </div>


</div>

